; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "中软万维证书控件"
#define MyAppVersion "1.0"
#define MyAppPublisher "cssweb, Inc."
#define MyAppURL "http://www.cssweb.sh.cn"



[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{6657831B-8A75-4EB4-B03A-CE4E3DBBDA9C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\CsswebCert
DefaultGroupName={#MyAppName}
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "chinesesimplified"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"

[Files]

Source: "..\resource\vs2010sp1_vcredist_x86.exe"; DestDir: "{tmp}" ; 
Source: "..\resource\vs2010sp1_vcredist_x86.exe"; DestDir: "{app}" ; 



Source: "..\resource\rootca.cer"; DestDir: "{app}"; 
Source: "..\resource\operation.cer"; DestDir: "{app}"; 

Source: "..\resource\xenroll.dll"; DestDir: "{app}"; Flags: regserver

Source: "..\release\CertDll.dll"; DestDir: "{app}"; 

Source: "..\release\DetectBrowserProcess.dll"; DestDir: "{app}";

Source: "..\release\CertActiveX.ocx"; DestDir: "{app}"; Flags: regserver
Source: "..\release\npcert.dll"; DestDir: "{app}";

Source: "..\resource\csswebcert.log"; DestDir: "{app}"

; NOTE: Don't use "Flags: ignoreversion" on any shared system files


[Icons]
Name: "{group}\卸载 中软万维证书控件"; Filename: "{uninstallexe}";

[Setup]
PrivilegesRequired=admin

[Registry]
Root: HKLM; Subkey: "SOFTWARE\MozillaPlugins\@cssweb.com/npcert"; Flags: uninsdeletekey
Root: HKLM; Subkey: "SOFTWARE\MozillaPlugins\@cssweb.com/npcert"; ValueType: string; ValueName: "Path"; ValueData: "{app}\npcert.dll"


[Run]
;Filename: "{app}\vs2010sp1_vcredist_x86.exe"; Check: VCRedistNeedsInstall

[UninstallRun]
;Filename: "regsvr32"; Parameters: "/u '{app}\xenroll.dll'"

[UninstallDelete]
;

[Code]
#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF

type 
  INSTALLSTATE = Longint;

const 
  INSTALLSTATE_DEFAULT = 5;
  VC2010SP1_REDIST_x86 = '{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}';

// add trusted website
function AddTrustedWebSite(website: String): Integer;
  external 'AddTrustedWebSite@files:CertDll.dll stdcall delayload';

// 
function FindCertByDN(Store, DN: String): Integer;
  external 'FindCertByDN@files:CertDll.dll stdcall delayload';

  // install ROOT cert
function InstallRootCert(certFile: String): Integer;
  external 'InstallRootCert@files:CertDll.dll stdcall delayload';

// install CA cert
function InstallCACert(certFile: String): Integer;
  external 'InstallCACert@files:CertDll.dll stdcall delayload';


function WriteInstallLog(FileName, Log: String): Integer;
  external 'WriteInstallLog@files:CertDll.dll stdcall delayload';

function DetectBrowserProcess(): Integer;
  external 'DetectBrowserProcess@files:DetectBrowserProcess.dll stdcall delayload';





 
procedure CurStepChanged(CurStep: TSetupStep);
var 
nRet : Integer;
file : String;
logFile : String;

begin
      logFile := ExpandConstant('{app}\csswebcert.log');

      if (CurStep = ssPostInstall )  then
      begin
        nRet := AddTrustedWebSite('http://*.gtja.com');
        if (nRet = 0)   then
        begin
           WriteInstallLog(logFile, 'add http trusted website error');
        end;

        AddTrustedWebSite('https://*.gtja.com');
        if (nRet = 0) then
        begin

          WriteInstallLog(logFile, 'add https trusted website error');
        end;

        nRet := FindCertByDN('ROOT', 'C=CN, O=CSDC Test, CN=Root CA Test');
        if (nRet = 0) then
        begin
          file := ExpandConstant('{app}\rootca.cer');
          nRet := InstallRootCert(file);
          if (nRet = 0) then
                     WriteInstallLog(logFile, 'install root cer fail')
          else
            WriteInstallLog(logFile, 'install root cer success')
        end
        else
        begin
          WriteInstallLog(logFile, 'root cer is exist.')
        end;
        
        
         nRet := FindCertByDN('CA', 'C=CN, O=CSDC Test, CN=Operation CA01 Test'); 
        if (nRet = 0) then
        begin
          file := ExpandConstant('{app}\operation.cer');
          nRet := InstallCACert(file);
          if (nRet = 0) then
            WriteInstallLog(logFile, 'install ca cer fail')
           else
            WriteInstallLog(logFile, 'install ca cer success')
        end
        else
        begin
          WriteInstallLog(logFile, 'ca cer is exist.')
        end ;
      end; 
end;



function MsiQueryProductState(szProduct: string): INSTALLSTATE;
  external 'MsiQueryProductState{#AW}@msi.dll stdcall';

function VCVersionInstalled(const ProductID: string):Boolean;
var 
  nRet : Integer;
  ret : String;
  logFile : String;
begin
  nRet := MsiQueryProductState(ProductID);
  ret := IntToStr(nRet);
 

  Result := MsiQueryProductState(ProductID) = INSTALLSTATE_DEFAULT;

   //logFile := ExpandConstant('{app}\csswebcert.log');
  //if (Result = true) then
   // WriteInstallLog(logFile, '\n vs2010 runtime is exist.') 
  //else
   //   WriteInstallLog(logFile, '\n vs2010 runtime is not exist.') ;
          
end;

function VCRedistNeedsInstall: Boolean;
var
logFile : String;
begin
  //logFile := ExpandConstant('{app}\csswebcert.log');

  Result := not ( VCVersionInstalled(VC2010SP1_REDIST_x86) )


end;

function InitializeSetup(): Boolean;
var
nRet : Integer;
bRet : Boolean;
ErrorCode: Integer;
s: String;
begin
 
    bRet := VCRedistNeedsInstall();
    if (bRet = true) then
    begin
      //MsgBox('vcredist.exe is not exist', mbInformation, MB_OK);
      ExtractTemporaryFiles('{tmp}\vs2010sp1_vcredist_x86.exe');
       s :=  ExpandConstant('{tmp}\vs2010sp1_vcredist_x86.exe');
      ShellExec('open', s, '', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);
       //MsgBox(s, mbInformation, MB_OK);
      //s := SysErrorMessage(ErrorCode);
        // MsgBox(s, mbInformation, MB_OK);
    end;
 
    nRet := DetectBrowserProcess();
    if (nRet = 1) then
    begin
      MsgBox('安装程序检测到浏览器(IE, Chrome, Firefox)正在运行，请先关闭浏览器，然后重新安装。',mbConfirmation, MB_OK);
      Result := false;
    end
    else
    begin
      Result := true;
    end;
end;
